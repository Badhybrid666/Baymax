import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        //@formatter:off

        //plugin versions
        gradleGitVersion        = '2.0.0'
        springBootVersion       = '2.1.4.RELEASE'
        aptVersion              = '0.21'
        sonarqubeVersion        = '2.7'

        //@formatter:on
    }
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://repo.spring.io/plugins-release' }
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "net.ltgt.gradle:gradle-apt-plugin:${aptVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}"
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.springframework.boot'
apply plugin: 'net.ltgt.apt'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

group 'space.npstr.baymax'
version '0.0.1-SNAPSHOT'
ext {
    moduleName = 'baymax'

    //@formatter:off
    javaVersion             = JavaVersion.VERSION_11

    springBootVersion       = "${springBootVersion}"

    jdaVersion              = '3.8.3_463'
    logbackVersion          = '1.2.3'
    sentryVersion           = '1.7.22'
    okhttpVersion           = '3.14.1'
    annotationsVersion      = '0.0.1'
    snakeYamlVersion        = '1.24'
    caffeineVersion         = '2.7.0'
    emojiVersion            = '4.0.0'
    guavaVersion            = '27.1-jre'

    sqliteVersion           = '3.27.2.1'
    flywayVersion           = '5.2.4'

    jUnitVersion            = '5.4.1'

    //@formatter:on
}

sourceCompatibility = targetCompatibility = javaVersion

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url 'https://jitpack.io' }
}

configurations {
    // fucks with spring boot jar, we don't need it anyways
    compile.exclude module: 'opus-java'
}

dependencies {
    //@formatter:off

    compile group: 'net.dv8tion',           name: 'JDA',                version: jdaVersion         // discord API
    compile group: 'ch.qos.logback',        name: 'logback-classic',    version: logbackVersion     // logging framework
    compile group: 'io.sentry',             name: 'sentry-logback',     version: sentryVersion      // error aggregation
    compile group: 'com.squareup.okhttp3',  name: 'okhttp',             version: okhttpVersion      // http client
    compile group: 'space.npstr',           name: 'annotations',        version: annotationsVersion // moar annotations
    compile group: 'org.yaml',              name: 'snakeyaml',          version: snakeYamlVersion   // yaml file parsing
    compile group: 'com.github.ben-manes.caffeine', name:'caffeine',    version: caffeineVersion    // caches
    compile group: 'com.vdurmont',          name: 'emoji-java',         version: emojiVersion       // emoji lib
    compile group: 'com.google.guava',      name: 'guava',              version: guavaVersion       // stuff...like memoizers
    compile group: 'org.xerial',            name: 'sqlite-jdbc',        version: sqliteVersion      // db
    compile group: 'org.flywaydb',          name: 'flyway-core',        version: flywayVersion      // migrations

    //spring
    compile group: 'org.springframework.boot', name: 'spring-boot-starter',                 version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: springBootVersion

    //testing
    testCompile group: 'org.junit.jupiter',    name: 'junit-jupiter-api',       version: jUnitVersion
    testRuntime group: 'org.junit.jupiter',    name: 'junit-jupiter-engine',    version: jUnitVersion

    //@formatter:on
}

tasks.withType(JavaCompile) {
    dependsOn(clean, processResources)
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

bootRun {
    //compiling tests during bootRun increases the likelyhood of catching broken tests locally instead of on the CI
    dependsOn compileTestJava

    //pass in custom jvm args
    // source: https://stackoverflow.com/a/25079415
    // example: ./gradlew bootRun -PjvmArgs="--illegal-access=debug -Dwhatever=value"
    if (project.hasProperty('jvmArgs')) {
        //noinspection GroovyAssignabilityCheck
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

bootJar {
    archiveName = "baymax.jar"
    doLast {
        copy {
            from 'build/libs/baymax.jar'
            into '.'
        }
    }
}

test {
    useJUnitPlatform()
    jacoco {
        includes['space.npstr.baymax.*']
    }
}

sonarqube {
    properties {
        property 'sonar.inclusions', 'src/main/java/space/npstr/baymax/**/*'
    }
}

processResources {
    //inject values into app.properties
    filesMatching("**/app.properties") {
        filter ReplaceTokens, tokens: [
                "project.version"   : project.version,
                "project.groupId"   : project.group,
                "project.artifactId": project.ext.moduleName,
                "env.BUILD_NUMBER"  : (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : 'DEV'),
                "env.BUILD_TIME"    : System.currentTimeMillis() + ''
        ]
    }
}
